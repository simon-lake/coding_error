# this is for groundnut. other crops will need to change names in follwoing lines

# 14, 37, 38, 78-88, 241, 255, 296. these are files names which need to be changed to represent modelled crop

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import glob
import numpy as np
import matplotlib.pyplot as plt
import os

# Replace 'csv_folder/*.csv' with the path pattern of your CSV files.
# For example, if your CSV files are in a folder named 'csv_data', then use 'csv_data/*.csv'.
csv_files = glob.glob(
    'C:/MSC_PYTHON_CROPS/taro_test/365_irr/*.csv')

# Loop through each CSV file and convert it to Excel
for csv_file in csv_files:
    # Extract the filename without extension to use as the output Excel filename
    output_file = csv_file.replace('.csv', '.xlsx')

    # Read data from the CSV file into a pandas DataFrame
    df = pd.read_csv(csv_file)

    # Write the DataFrame to an Excel file
    df.to_excel(output_file, index=False)

    print(
        f"CSV file '{csv_file}' has been converted to '{output_file}' (Excel).")

    # Delete the CSV file after conversion
    os.remove(csv_file)
    print(f"CSV file '{csv_file}' has been deleted.")

# the csv files have been converted to xlsx and then deleted to not take up space

# Replace these with the actual file paths of your Excel workbooks
file_path2 = 'obstmp_195099_tarirr_15k020_yld_ave_014.xlsx'
file_path1 = 'obstmp_195099_tarirr_15k020_wue_ave_014.xlsx'

# Read data from both Excel workbooks into pandas DataFrames
df1 = pd.read_excel(file_path1)
df2 = pd.read_excel(file_path2)

# Create a new DataFrame containing the desired structure
combined_df = pd.DataFrame({
    # Replace 'Column1' with the actual column name from file 1
    'sub_cat': df1['sub_cat'],
    # Replace 'CWP_kg m^-3' with the actual column name from file 1
    'CWP (kg m^-3)': df1['value'],
    # Replace 'YIELD_t ha^-1' with the actual column name from file 2
    'YIELD (t ha^-1)': df2['value']
})

# Add a new column 'Column4' by multiplying 'YIELD' column by 1000
combined_df['YIELD (kg ha^-1)'] = combined_df['YIELD (t ha^-1)'] * 1000

# Replace 'output_file.xlsx' with the desired output file name
output_file = 'YIELD VS CWP.xlsx'

# Write the combined DataFrame to a new Excel workbook
combined_df.to_excel(output_file, index=False)


def combine_and_save(file_path1, file_path2, column1, column2, output_file):
    df1 = pd.read_excel(file_path1)
    df2 = pd.read_excel(file_path2)

    combined_df = pd.DataFrame({
        'sub_cat': df1['sub_cat'],
        column1: df1['value'],
        column2: df2['value']
    })

    combined_df.to_excel(output_file, index=False)


# Example usage with the given file paths and column names
file_path1 = 'obstmp_195099_tarirr_15k020_wue_ave_014.xlsx'
file_path2 = 'obstmp_195099_tarirr_15k020_yld_ave_014.xlsx'
file_path3 = 'obstmp_195099_tarirr_15k020_yld_pcv_014.xlsx'
file_path4 = 'obstmp_195099_tarirr_15k020_ste_ave_014.xlsx'
file_path5 = 'obstmp_195099_tarirr_15k020_sst_ave_014.xlsx'
file_path6 = 'obstmp_195099_tarirr_15k020_sle_ave_014.xlsx'
file_path7 = 'obstmp_195099_tarirr_15k020_len_ave_014.xlsx'
file_path8 = 'obstmp_195099_tarirr_15k020_etc_ave_014.xlsx'
file_path9 = 'obstmp_195099_tarirr_15k020_wue_pcv_014.xlsx'
file_path10 = 'obstmp_195099_tarirr_15k020_yld_obs_014.xlsx'
file_path11 = 'obstmp_195099_tarirr_15k020_cfa_sum_014.xlsx'

output_file1 = 'CWP VS Y CV.xlsx'
combine_and_save(file_path1, file_path3, 'CWP (kg m^-3)',
                 'YIELD CV (%)', output_file1)

output_file2 = 'CWP VS TEMP. STRESS.xlsx'
combine_and_save(file_path1, file_path4,
                 'CWP (kg m^-3)', 'TEMP. STRESS (%)', output_file2)

output_file3 = 'CWP VS STO. STRESS.xlsx'
combine_and_save(file_path1, file_path5,
                 'CWP (kg m^-3)', 'STO. STRESS (%)', output_file3)

output_file4 = 'CWP VS LEAF STRESS.xlsx'
combine_and_save(file_path1, file_path6,
                 'CWP (kg m^-3)', 'LEAF STRESS (%)', output_file4)

output_file5 = 'CWP VS CYCLE LENGTH.xlsx'
combine_and_save(file_path7, file_path1,
                 'CYCLE LENGTH (days)', 'CWP (kg m^-3)', output_file5)

output_file6 = 'CWP VS ETC.xlsx'
combine_and_save(file_path1, file_path8,
                 'CWP (kg m^-3)', 'ETC (%)', output_file6)

output_file7 = 'YIELD VS Y CV.xlsx'
combine_and_save(file_path2, file_path3,
                 'YIELD (t ha^-1)', 'YIELD CV (%)', output_file7)

output_file8 = 'YIELD VS TEMP. STRESS.xlsx'
combine_and_save(file_path2, file_path4,
                 'YIELD (t ha^-1)', 'TEMP. STRESS (%)', output_file8)

output_file9 = 'YIELD VS STO. STRESS.xlsx'
combine_and_save(file_path2, file_path5,
                 'YIELD (t ha^-1)', 'STO. STRESS (%)', output_file9)

output_file10 = 'YIELD VS LEAF STRESS.xlsx'
combine_and_save(file_path2, file_path6,
                 'YIELD (t ha^-1)', 'LEAF STRESS (%)', output_file10)

output_file11 = 'YIELD VS CYCLE LENGTH.xlsx'
combine_and_save(file_path7, file_path2,
                 'CYCLE LENGTH (days)', 'YIELD (t ha^-1)', output_file11)

output_file12 = 'YIELD VS ETC.xlsx'
combine_and_save(file_path2, file_path8,
                 'YIELD (t ha^-1)', 'ETC (%)', output_file12)

output_file13 = 'ETC VS TEMP. STRESS.xlsx'
combine_and_save(file_path8, file_path4,
                 'ETC (%)', 'TEMP. STRESS (%)', output_file13)

output_file14 = 'ETC VS STO. STRESS.xlsx'
combine_and_save(file_path8, file_path5,
                 'ETC (%)', 'STO. STRESS (%)', output_file14)

output_file15 = 'ETC VS LEAF STRESS.xlsx'
combine_and_save(file_path8, file_path6,
                 'ETC (%)', 'LEAF STRESS (%)', output_file15)

output_file16 = 'ETC VS CYCLE LENGTH.xlsx'
combine_and_save(file_path7, file_path8,
                 'CYCLE LENGTH (days)', 'ETC (%)', output_file16)

output_file17 = 'STO. STRESS VS TEMP. STRESS.xlsx'
combine_and_save(file_path5, file_path4,
                 'STO. STRESS (%)', 'TEMP. STRESS (%)', output_file17)

output_file18 = 'STO. STRESS VS LEAF STRESS.xlsx'
combine_and_save(file_path5, file_path6,
                 'STO. STRESS (%)', 'LEAF STRESS (%)', output_file18)

output_file19 = 'TEMP. STRESS VS LEAF STRESS.xlsx'
combine_and_save(file_path4, file_path6,
                 'TEMP. STRESS (%)', 'LEAF STRESS (%)', output_file19)

output_file20 = 'CYCLE LENGTH VS TEMP. STRESS.xlsx'
combine_and_save(file_path7, file_path4,
                 'CYCLE LENGTH (days)', 'TEMP. STRESS (%)', output_file20)

output_file21 = 'CYCLE LENGTH VS STO. STRESS.xlsx'
combine_and_save(file_path7, file_path5,
                 'CYCLE LENGTH (days)', 'STO. STRESS (%)', output_file21)

output_file22 = 'CYCLE LENGTH VS LEAF STRESS.xlsx'
combine_and_save(file_path7, file_path6,
                 'CYCLE LENGTH (days)', 'LEAF STRESS (%)', output_file22)

output_file23 = 'CWP CV VS Y CV.xlsx'
combine_and_save(file_path9, file_path3, 'CWP CV (%)',
                 'YIELD CV (%)', output_file23)

output_file24 = 'CWP VS CWP CV.xlsx'
combine_and_save(file_path1, file_path9, 'CWP (kg m^-3)',
                 'CWP CV (%)', output_file24)


# Read data from both Excel workbooks into pandas DataFrames
df1 = pd.read_excel(file_path10)
df2 = pd.read_excel(file_path11)

# Create a new DataFrame containing the desired structure
combined_df = pd.DataFrame({
    # Replace 'Column1' with the actual column name from file 1
    'sub_cat': df1['sub_cat'],
    # Replace 'CWP_kg m^-3' with the actual column name from file 1
    'Y obs': df1['value'],
    # Replace 'YIELD_t ha^-1' with the actual column name from file 2
    'Y fail': df2['value']
})

# Add a new column 'Column4' by (Y fail/Y obs)*100
combined_df['ROCF (%)'] = (combined_df['Y fail'] / combined_df['Y obs']) * 100

# Replace 'output_file.xlsx' with the desired output file name
output_file25 = 'ROCF.xlsx'

# Save the combined DataFrame to an Excel file
combined_df.to_excel(output_file25, index=False)

# Replace these with the actual file paths of your Excel workbooks
file_paths = [
    'YIELD VS CWP.xlsx',
    'YIELD VS CYCLE LENGTH.xlsx',
    'YIELD VS ETC.xlsx',
    'YIELD VS LEAF STRESS.xlsx',
    'YIELD VS STO. STRESS.xlsx',
    'YIELD VS TEMP. STRESS.XLSX',
    'YIELD VS Y CV.xlsx',
    'CWP VS CYCLE LENGTH.XLSX',
    'CWP VS ETC.XLSX',
    'CWP VS TEMP. STRESS.XLSX',
    'CWP VS LEAF STRESS.XLSX',
    'CWP VS Y CV.XLSX',
    'CWP VS STO. STRESS.XLSX',
    'CYCLE LENGTH VS LEAF STRESS.XLSX',
    'CYCLE LENGTH VS TEMP. STRESS.XLSX',
    'CYCLE LENGTH VS STO. STRESS.XLSX',
    'ETC VS CYCLE LENGTH.XLSX',
    'ETC VS LEAF STRESS.XLSX',
    'ETC VS STO. STRESS.XLSX',
    'ETC VS TEMP. STRESS.XLSX',
    'STO. STRESS VS TEMP. STRESS.XLSX',
    'STO. STRESS VS LEAF STRESS.XLSX',
    'TEMP. STRESS VS LEAF STRESS.XLSX',
    'CWP CV VS Y CV.xlsx',
    'ROCF.xlsx',
    'CWP vs CWP CV.xlsx'
]

# Create an Excel writer object to write to the output file
output_file26 = 'irrigated_taro_365.xlsx'
writer = pd.ExcelWriter(output_file26, engine='xlsxwriter')

# Iterate over the file paths and write each DataFrame to a separate sheet with the workbook name as the sheet name
for file_path in file_paths:
    workbook_name = os.path.splitext(os.path.basename(file_path))[0]
    df = pd.read_excel(file_path)
    df.to_excel(writer, sheet_name=workbook_name, index=False)

writer.close()

print(f"Data from {len(file_paths)} workbooks merged into '{output_file26}'.")

# yield vs cwp plot is different since it has an extra column than the others
df = pd.read_excel("irrigated_taro_365.xlsx", sheet_name=0,
                   usecols=[1, 3])

# Filter out rows with -999 in the 'CWP (kg m^-3)' column and -999000 in the 'YIELD (kg ha^-1)' column
df_filtered_data = df[(df['CWP (kg m^-3)'] != -999) &
                      (df['YIELD (kg ha^-1)'] != -999000)]

x = df_filtered_data["CWP (kg m^-3)"].values.reshape(-1, 1)
y = df_filtered_data["YIELD (kg ha^-1)"].values

plt.scatter(x, y)
plt.xlabel('CWP (kg m$^{-3}$)')
plt.ylabel('Dry Yield (kg ha$^{-1}$)')

# create linear regression model through the origin (0,0)
model = LinearRegression(fit_intercept=False)

# fit the model to your data
model.fit(x, y)

# get the slope (coefficients) of the regression line
slope = model.coef_[0]

# make predictions using the model
y_pred = model.predict(x)

# Calculate R-squared
r_squared = model.score(x, y)
print(f'R-squared: {r_squared}')

# Add equation of the regression line and R-squared to the plot
equation_text = f"Y = {slope:.2f}X"
r_squared_text = f"$R^2$ = {r_squared:.4f}"

plt.plot(x, y_pred, color='black', linestyle="dotted",
         label='Regression Line (Intercept 0)')
plt.text(0.05, 0.95, equation_text, transform=plt.gca().transAxes,
         fontsize=12, verticalalignment='top')
plt.text(0.05, 0.88, r_squared_text, transform=plt.gca().transAxes,
         fontsize=12, verticalalignment='top')
plt.grid()
plt.yticks(np.arange(0, max(y) + 1000, 1000))

# Save the plot as a PNG image
plot_image_path = "Yield_vs_CWP.png"
plt.savefig(plot_image_path)

# Replace "your_workbook.xlsx" with the actual filename of your Excel workbook
workbook = pd.ExcelFile("irrigated_taro_365.xlsx")

# Dictionary that maps sheet names to column names for x and y data
sheet_columns = {
    "YIELD VS CYCLE LENGTH": {"y": "CYCLE LENGTH (days)", "x": "YIELD (t ha^-1)"},
    "YIELD VS ETC": {"x": "YIELD (t ha^-1)", "y": "ETC (%)"},
    "YIELD VS LEAF STRESS": {"x": "YIELD (t ha^-1)", "y": "LEAF STRESS (%)"},
    "YIELD VS STO. STRESS": {"x": "YIELD (t ha^-1)", "y": "STO. STRESS (%)"},
    "YIELD VS TEMP. STRESS": {"x": "YIELD (t ha^-1)", "y": "TEMP. STRESS (%)"},
    "YIELD VS Y CV": {"x": "YIELD (t ha^-1)", "y": "YIELD CV (%)"},
    "CWP VS CYCLE LENGTH": {"y": "CWP (kg m^-3)", "x": "CYCLE LENGTH (days)"},
    "CWP VS ETC": {"x": "CWP (kg m^-3)", "y": "ETC (%)"},
    "CWP VS TEMP. STRESS": {"x": "CWP (kg m^-3)", "y": "TEMP. STRESS (%)"},
    "CWP VS LEAF STRESS": {"x": "CWP (kg m^-3)", "y": "LEAF STRESS (%)"},
    "CWP VS STO. STRESS": {"x": "CWP (kg m^-3)", "y": "STO. STRESS (%)"},
    "CWP VS Y CV": {"x": "CWP (kg m^-3)", "y": "YIELD CV (%)"},
    "CYCLE LENGTH VS LEAF STRESS": {"x": "CYCLE LENGTH (days)", "y": "LEAF STRESS (%)"},
    "CYCLE LENGTH VS TEMP. STRESS": {"x": "CYCLE LENGTH (days)", "y": "TEMP. STRESS (%)"},
    "CYCLE LENGTH VS STO. STRESS": {"x": "CYCLE LENGTH (days)", "y": "STO. STRESS (%)"},
    "ETC VS CYCLE LENGTH": {"x": "CYCLE LENGTH (days)", "y": "ETC (%)"},
    "ETC VS LEAF STRESS": {"x": "ETC (%)", "y": "LEAF STRESS (%)"},
    "ETC VS STO. STRESS": {"x": "ETC (%)", "y": "STO. STRESS (%)"},
    "ETC VS TEMP. STRESS": {"x": "ETC (%)", "y": "TEMP. STRESS (%)"},
    "STO. STRESS VS TEMP. STRESS": {"x": "STO. STRESS (%)", "y": "TEMP. STRESS (%)"},
    "STO. STRESS VS LEAF STRESS": {"x": "STO. STRESS (%)", "y": "LEAF STRESS (%)"},
    "TEMP. STRESS VS LEAF STRESS": {"y": "TEMP. STRESS (%)", "x": "LEAF STRESS (%)"},
    "CWP CV VS Y CV": {"x": "CWP CV (%)", "y": "YIELD CV (%)"},
    "CWP vs CWP CV": {"x": "CWP (kg m^-3)", "y": "CWP CV (%)"}
}

for sheet_name in workbook.sheet_names:
    if sheet_name not in sheet_columns:
        continue

    # Get the column names for x and y data for the current sheet
    columns = sheet_columns[sheet_name]
    x_column = columns["x"]
    y_column = columns["y"]

    df = workbook.parse(sheet_name, usecols=[x_column, y_column])

    # Filter out rows with -999 in both x_column and y_column
    df_filtered = df[(df[x_column] != -999) & (df[y_column] != -999)]

    x = df_filtered[x_column].values.reshape(-1, 1)
    y = df_filtered[y_column].values

    plt.figure()

    plt.scatter(x, y)
    plt.xlabel(f'{x_column}')
    plt.ylabel(f'{y_column}')

    # Perform linear regression
    model = LinearRegression()

   # fit model to data
    model.fit(x, y)

   # get the slope coefficients of the regression model
    slope = model.coef_[0]

   # get the intercept of the regression line
    intercept = model.intercept_

   # make predictions usign the model
    y_pred = model.predict(x)

   # Calculate R-squared
    r_squared = r2_score(y, y_pred)

    # Add equation of the regression line and R-squared to the plot
    equation_text = f"Y = {slope:.2f}X + {intercept:.2f}"
    r_squared_text = f"$R^2$= {r_squared:.4f}"

    plt.plot(x, y_pred, color='black',
             linestyle='dotted', label='Regression Line')
    plt.text(0.05, 0.95, equation_text, transform=plt.gca().transAxes,
             fontsize=12, verticalalignment='top')
    plt.text(0.05, 0.88, r_squared_text, transform=plt.gca().transAxes,
             fontsize=12, verticalalignment='top')
    plt.grid()

    # Save the plot as a PNG image
    plot_image_path = f"{sheet_name}.png"
    plt.savefig(plot_image_path)

    plt.close()
    # one has to close to prevent to much memory being used when creating large numbers of figures
